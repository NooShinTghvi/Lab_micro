;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/28/2017
;Author  : Mehrshad
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdlib.h>
;#include <delay.h>
;char score[4];
;char i=0;
;char old=1,new,lose=0,cnt=0;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 // Place your code here
; 0000 0025 lcd_clear();
;PCODE: $0000000F VOL: 0
; 0000 0026 lcd_gotoxy(i,0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0027 lcd_puts("#");
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0028 i++;
;PCODE: $00000016 VOL: 0
; 0000 0029 if(i==15){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002A     i=0;
;PCODE: $0000001A VOL: 0
; 0000 002B     lcd_clear();
;PCODE: $0000001B VOL: 0
; 0000 002C     lcd_gotoxy(15,0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002D     lcd_puts("       |    |");
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002E     lcd_gotoxy(0,1);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002F     lcd_puts("s=");
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030     lcd_puts(score);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0031 }
; 0000 0032 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0

	.DSEG
_0x3:
	.BYTE 0x13
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0035 {

	.CSEG
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0036 // Place your code here
; 0000 0037 cnt=0;
;PCODE: $00000032 VOL: 0
; 0000 0038 i=0;
;PCODE: $00000033 VOL: 0
; 0000 0039 lose=0;
;PCODE: $00000034 VOL: 0
; 0000 003A lcd_clear();
;PCODE: $00000035 VOL: 0
; 0000 003B OCR0=255;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003C TCCR0=0x0D;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003D }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0042 {
;PCODE: $0000003D VOL: 0
; 0000 0043 // Declare your local variables here
; 0000 0044 
; 0000 0045 // Input/Output Ports initialization
; 0000 0046 // Port A initialization
; 0000 0047 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0048 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0049 PORTA=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004A DDRA=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004B 
; 0000 004C // Port B initialization
; 0000 004D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=P
; 0000 004F PORTB=0x01;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0050 DDRB=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0051 
; 0000 0052 // Port C initialization
; 0000 0053 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0054 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0055 PORTC=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0056 DDRC=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0057 
; 0000 0058 // Port D initialization
; 0000 0059 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005B PORTD=0xff;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005C DDRD=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005D 
; 0000 005E // Timer/Counter 0 initialization
; 0000 005F // Clock source: System Clock
; 0000 0060 // Clock value: 7.813 kHz
; 0000 0061 // Mode: CTC top=OCR0
; 0000 0062 // OC0 output: Disconnected
; 0000 0063 TCCR0=0x0D;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0064 TCNT0=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0065 OCR0=0xFF;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0066 
; 0000 0067 // Timer/Counter 1 initialization
; 0000 0068 // Clock source: System Clock
; 0000 0069 // Clock value: Timer1 Stopped
; 0000 006A // Mode: Normal top=0xFFFF
; 0000 006B // OC1A output: Discon.
; 0000 006C // OC1B output: Discon.
; 0000 006D // Noise Canceler: Off
; 0000 006E // Input Capture on Falling Edge
; 0000 006F // Timer1 Overflow Interrupt: Off
; 0000 0070 // Input Capture Interrupt: Off
; 0000 0071 // Compare A Match Interrupt: Off
; 0000 0072 // Compare B Match Interrupt: Off
; 0000 0073 TCCR1A=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0074 TCCR1B=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0075 TCNT1H=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0076 TCNT1L=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0077 ICR1H=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0078 ICR1L=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0079 OCR1AH=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 007A OCR1AL=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007B OCR1BH=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 007C OCR1BL=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 007D 
; 0000 007E // Timer/Counter 2 initialization
; 0000 007F // Clock source: System Clock
; 0000 0080 // Clock value: Timer2 Stopped
; 0000 0081 // Mode: Normal top=0xFF
; 0000 0082 // OC2 output: Disconnected
; 0000 0083 ASSR=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0084 TCCR2=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0085 TCNT2=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0086 OCR2=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0087 
; 0000 0088 // External Interrupt(s) initialization
; 0000 0089 // INT0: On
; 0000 008A // INT0 Mode: Falling Edge
; 0000 008B // INT1: Off
; 0000 008C // INT2: Off
; 0000 008D GICR|=0x40;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 008E MCUCR=0x02;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 008F MCUCSR=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0090 GIFR=0x40;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0091 
; 0000 0092 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0093 TIMSK=0x02;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0094 
; 0000 0095 // USART initialization
; 0000 0096 // USART disabled
; 0000 0097 UCSRB=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0098 
; 0000 0099 // Analog Comparator initialization
; 0000 009A // Analog Comparator: Off
; 0000 009B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 009C ACSR=0x80;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009D SFIOR=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009E 
; 0000 009F // ADC initialization
; 0000 00A0 // ADC disabled
; 0000 00A1 ADCSRA=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A2 
; 0000 00A3 // SPI initialization
; 0000 00A4 // SPI disabled
; 0000 00A5 SPCR=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00A6 
; 0000 00A7 // TWI initialization
; 0000 00A8 // TWI disabled
; 0000 00A9 TWCR=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00AA 
; 0000 00AB // Alphanumeric LCD initialization
; 0000 00AC // Connections are specified in the
; 0000 00AD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00AE // RS - PORTA Bit 0
; 0000 00AF // RD - PORTA Bit 1
; 0000 00B0 // EN - PORTA Bit 2
; 0000 00B1 // D4 - PORTA Bit 4
; 0000 00B2 // D5 - PORTA Bit 5
; 0000 00B3 // D6 - PORTA Bit 6
; 0000 00B4 // D7 - PORTA Bit 7
; 0000 00B5 // Characters/line: 16
; 0000 00B6 lcd_init(16);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B7 lcd_clear();
;PCODE: $00000089 VOL: 0
; 0000 00B8 lcd_gotoxy(6,1);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B9 lcd_puts("|    |");
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00BA 
; 0000 00BB // Global enable interrupts
; 0000 00BC #asm("sei")
;PCODE: $00000091 VOL: 0
	sei
;PCODE: $00000092 VOL: 0
; 0000 00BD 
; 0000 00BE while (1)
;PCODE: $00000093 VOL: 0
; 0000 00BF       {
; 0000 00C0       // Place your code here
; 0000 00C1       new=PINB.0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00C2       if(new==0 && old==1){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C3         if((i<(7+4)) && (i>7)){
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C4             cnt++;
;PCODE: $000000AB VOL: 0
; 0000 00C5             OCR0=OCR0-5;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C6         }
; 0000 00C7         else{
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00C8             lose=1;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00C9         }
;PCODE: $000000B3 VOL: 0
; 0000 00CA       }
; 0000 00CB 
; 0000 00CC       itoa((int)cnt,score);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00CD       if(lose==1){
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00CE         TCCR0=0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00CF         #asm("cli")
;PCODE: $000000BF VOL: 0
	cli
;PCODE: $000000C0 VOL: 0
; 0000 00D0         lcd_clear();
;PCODE: $000000C1 VOL: 0
; 0000 00D1         lcd_gotoxy(0,0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D2 //      itoa((int)cnt,score);
; 0000 00D3         lcd_puts("score = ");
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00D4         lcd_puts(score);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00D5         lose=0;
;PCODE: $000000CB VOL: 0
; 0000 00D6         #asm("sei")
;PCODE: $000000CC VOL: 0
	sei
;PCODE: $000000CD VOL: 0
; 0000 00D7       }
; 0000 00D8 
; 0000 00D9       old=new;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DA 
; 0000 00DB       }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00DC }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0

	.DSEG
_0x5:
	.BYTE 0x10
