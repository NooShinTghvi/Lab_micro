;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/19/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// 1 Wire Bus interface functions
;#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds1820.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <stdlib.h>
;int num ,num1   ;
;unsigned char negin[10], negin1[10];
;
;char date;
;
;// Declare your global variables here
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0030 // Place your code here
; 0000 0031 
; 0000 0032 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
;#define xtal 4000000L
;
;
;/* Baud rate */
;#define baud 9600
;
;#define MAX_DEVICES 1
;unsigned char rom_codes[MAX_DEVICES][9];
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0042 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0043 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000014 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0044 // Delay needed for the stabilization of the ADC input voltage
; 0000 0045 delay_us(10);
;PCODE: $00000018 VOL: 0
; 0000 0046 // Start the AD conversion
; 0000 0047 ADCSRA|=(1<<ADSC);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0048 // Wait for the AD conversion to complete
; 0000 0049 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004A ADCSRA|=(1<<ADIF);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004B return ADCH;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004C }
;PCODE: $00000026 VOL: 0
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0062 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0063 char status,data;
; 0000 0064 status=UCSRA;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0065 data=UDR;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0066 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0067    {
; 0000 0068    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0069 #if RX_BUFFER_SIZE == 256
; 0000 006A    // special case for receiver buffer size=256
; 0000 006B    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 006C #else
; 0000 006D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 006E    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006F       {
; 0000 0070       rx_counter=0;
;PCODE: $00000044 VOL: 0
; 0000 0071       rx_buffer_overflow=1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0072       }
; 0000 0073 #endif
; 0000 0074    }
;PCODE: $00000048 VOL: 0
; 0000 0075 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 007C {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007D char data;
; 0000 007E while (rx_counter==0);
;PCODE: $00000050 VOL: 0
;	data -> R17
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007F data=rx_buffer[rx_rd_index++];
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0080 #if RX_BUFFER_SIZE != 256
; 0000 0081 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0082 #endif
; 0000 0083 #asm("cli")
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
	cli
;PCODE: $00000061 VOL: 0
; 0000 0084 --rx_counter;
;PCODE: $00000062 VOL: 0
; 0000 0085 #asm("sei")
;PCODE: $00000063 VOL: 0
	sei
;PCODE: $00000064 VOL: 0
; 0000 0086 return data;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0087 }
;PCODE: $00000068 VOL: 0
;#pragma used-
;#endifs
;void main(void)
; 0000 008B {
;PCODE: $00000069 VOL: 0
; 0000 008C // Declare your local variables here
; 0000 008D unsigned char i,devices;
; 0000 008E int temp;
; 0000 008F 
; 0000 0090 
; 0000 0091 /* initialize the USART control register
; 0000 0092    TX enabled, no interrupts, 8 data bits */
; 0000 0093 UCSRA=0x00;
;	i -> R17
;	devices -> R16
;	temp -> R18,R19
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0094 UCSRB=0x08;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0095 UCSRC=0x86;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0096 
; 0000 0097 
; 0000 0098 /* initialize the USART's baud rate */
; 0000 0099 UBRRH=(xtal/16/baud-1) >> 8;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009A UBRRL=(xtal/16/baud-1) & 0xFF;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009B 
; 0000 009C 
; 0000 009D /* detect how many DS1820/DS18S20 devices
; 0000 009E    are connected to the bus and
; 0000 009F    store their ROM codes in the rom_codes array */
; 0000 00A0 devices=w1_search(0xf0,rom_codes);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A1 
; 0000 00A2 // Input/Output Ports initialization
; 0000 00A3 // Port A initialization
; 0000 00A4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A5 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A7 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A8 
; 0000 00A9 // Port B initialization
; 0000 00AA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00AB DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00AC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00AD PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AE 
; 0000 00AF // Port C initialization
; 0000 00B0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B1 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00B2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B3 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B4 
; 0000 00B5 // Port D initialization
; 0000 00B6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B7 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00B8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B9 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00BA 
; 0000 00BB // Timer/Counter 0 initialization
; 0000 00BC // Clock source: System Clock
; 0000 00BD // Clock value: 125.000 kHz
; 0000 00BE // Mode: Normal top=0xFF
; 0000 00BF // OC0 output: Disconnected
; 0000 00C0 // Timer Period: 2.048 ms
; 0000 00C1 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C2 TCNT0=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C3 OCR0=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C4 
; 0000 00C5 // Timer/Counter 1 initialization
; 0000 00C6 // Clock source: System Clock
; 0000 00C7 // Clock value: Timer1 Stopped
; 0000 00C8 // Mode: Normal top=0xFFFF
; 0000 00C9 // OC1A output: Disconnected
; 0000 00CA // OC1B output: Disconnected
; 0000 00CB // Noise Canceler: Off
; 0000 00CC // Input Capture on Falling Edge
; 0000 00CD // Timer1 Overflow Interrupt: Off
; 0000 00CE // Input Capture Interrupt: Off
; 0000 00CF // Compare A Match Interrupt: Off
; 0000 00D0 // Compare B Match Interrupt: Off
; 0000 00D1 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00D2 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00D3 TCNT1H=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00D4 TCNT1L=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00D5 ICR1H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00D6 ICR1L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D7 OCR1AH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D8 OCR1AL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D9 OCR1BH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DA OCR1BL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00DB 
; 0000 00DC // Timer/Counter 2 initialization  ds1820_temperature_10
; 0000 00DD // Clock source: System Clock
; 0000 00DE // Clock value: Timer2 Stopped
; 0000 00DF // Mode: Normal top=0xFF
; 0000 00E0 // OC2 output: Disconnected
; 0000 00E1 ASSR=0<<AS2;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00E2 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E3 TCNT2=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E4 OCR2=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00E5 
; 0000 00E6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E8 
; 0000 00E9 // External Interrupt(s) initialization
; 0000 00EA // INT0: Off
; 0000 00EB // INT1: Off
; 0000 00EC // INT2: Off
; 0000 00ED MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00EE MCUCSR=(0<<ISC2);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00EF 
; 0000 00F0 // USART initialization
; 0000 00F1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F2 // USART Receiver: On
; 0000 00F3 // USART Transmitter: On
; 0000 00F4 // USART Mode: Asynchronous
; 0000 00F5 // USART Baud Rate: 9600
; 0000 00F6 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00F7 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00F8 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F9 UBRRH=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00FA UBRRL=0x33;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00FB 
; 0000 00FC // Analog Comparator initialization
; 0000 00FD // Analog Comparator: Off
; 0000 00FE // The Analog Comparator's positive input is
; 0000 00FF // connected to the AIN0 pin
; 0000 0100 // The Analog Comparator's negative input is
; 0000 0101 // connected to the AIN1 pin
; 0000 0102 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0103 
; 0000 0104 // ADC initialization
; 0000 0105 // ADC Clock frequency: 1000.000 kHz
; 0000 0106 // ADC Voltage Reference: AREF pin
; 0000 0107 // ADC Auto Trigger Source: ADC Stopped
; 0000 0108 // Only the 8 most significant bits of
; 0000 0109 // the AD conversion result are used
; 0000 010A ADMUX=ADC_VREF_TYPE;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 010B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 010C SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 010D 
; 0000 010E // SPI initialization
; 0000 010F // SPI disabled
; 0000 0110 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0111 
; 0000 0112 // TWI initialization
; 0000 0113 // TWI disabled
; 0000 0114 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0115 
; 0000 0116 // 1 Wire Bus initialization
; 0000 0117 // 1 Wire Data port: PORTD
; 0000 0118 // 1 Wire Data bit: 0
; 0000 0119 // Note: 1 Wire port settings are specified in the
; 0000 011A // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0000 011B w1_init();
;PCODE: $000000C7 VOL: 0
; 0000 011C 
; 0000 011D // Alphanumeric LCD initialization
; 0000 011E // Connections are specified in the
; 0000 011F // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0120 // RS - PORTC Bit 0
; 0000 0121 // RD - PORTC Bit 1
; 0000 0122 // EN - PORTC Bit 2
; 0000 0123 // D4 - PORTC Bit 4
; 0000 0124 // D5 - PORTC Bit 5
; 0000 0125 // D6 - PORTC Bit 6
; 0000 0126 // D7 - PORTC Bit 7
; 0000 0127 // Characters/line: 16
; 0000 0128 lcd_init(16);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0129 
; 0000 012A // Global enable interrupts
; 0000 012B #asm("sei")
;PCODE: $000000CA VOL: 0
	sei
;PCODE: $000000CB VOL: 0
; 0000 012C 
; 0000 012D while (1)
;PCODE: $000000CC VOL: 0
; 0000 012E       {
; 0000 012F       // Place your code here
; 0000 0130       if (i == 0)  {
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0131 
; 0000 0132             temp=ds1820_temperature_10(&rom_codes[i][0]);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0133         //  printf("t%-u=%-i.%-u\xf8" "C\n\r",++i,temp/10,
; 0000 0134          // num = abs(temp%10);
; 0000 0135           itoa(temp/80, negin);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0136 
; 0000 0137        }
; 0000 0138 
; 0000 0139       num1 = read_adc(0);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 013A       itoa(num1*2, negin1);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 013B 
; 0000 013C       //itoa(num, negin);
; 0000 013D      // lcd_puts(negin);
; 0000 013E       date = getchar();
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 013F       if (date == '1') {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0140         lcd_gotoxy(0,0);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0141         lcd_puts(negin);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0142       }
; 0000 0143       else if(date == '2'){
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0144           lcd_gotoxy(0,1);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0145           lcd_puts(negin1);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0146       }
; 0000 0147       else {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0148         lcd_gotoxy(5,1);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0149           lcd_puts("bad");
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 014A       }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 014B 
; 0000 014C       }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 014D }
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0

	.DSEG
_0x15:
	.BYTE 0x4
