
AVRASM ver. 2.1.30  C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm Wed Dec 19 21:18:28 2018

C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _negin=R4
                 	.DEF _negin_msb=R5
                 	.DEF _x=R6
                 	.DEF _x_msb=R7
                 	.DEF _pushed=R8
                 	.DEF _pushed_msb=R9
                 	.DEF _count__=R10
                 	.DEF _count___msb=R11
                 	.DEF _a=R12
                 	.DEF _a_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0075 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x2000060:
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1140): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2000000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\NooShin\Desktop\Lab\6\Q6\Debug\List\a.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 _0x2040003:
00003d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003e 0008      	.DW  0x08
00003f 0004      	.DW  0x04
000040 0066      	.DW  __REG_VARS*2
                 
000041 0001      	.DW  0x01
000042 016a      	.DW  __seed_G100
000043 006e      	.DW  _0x2000060*2
                 
000044 0002      	.DW  0x02
000045 016e      	.DW  __base_y_G102
000046 007a      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004f e08d      	LDI  R24,(14-2)+1
000050 e0a2      	LDI  R26,2
000051 27bb      	CLR  R27
                 __CLEAR_REG:
000052 93ed      	ST   X+,R30
000053 958a      	DEC  R24
000054 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000055 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000056 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000057 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ; unsigned int  negin =0;
                 ; unsigned int x =0;
                 ; int pushed = 0;
                 ; int count__ =0;
                 ; unsigned int a;
                 ; unsigned char c[10];
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0012 interrupt [10] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000075 93ea      	ST   -Y,R30
000076 93fa      	ST   -Y,R31
000077 b7ef      	IN   R30,SREG
000078 93ea      	ST   -Y,R30
                 ; 0000 0013     if (pushed >= 1){
000079 e0e1      	LDI  R30,LOW(1)
00007a e0f0      	LDI  R31,HIGH(1)
00007b 168e      	CP   R8,R30
00007c 069f      	CPC  R9,R31
00007d f01c      	BRLT _0x3
                 ; 0000 0014         count__ ++;
00007e 01f5      	MOVW R30,R10
00007f 9631      	ADIW R30,1
000080 015f      	MOVW R10,R30
                 ; 0000 0015     }
                 ; 0000 0016 
                 ; 0000 0017 // Place your code here
                 ; 0000 0018 
                 ; 0000 0019 }
                 _0x3:
000081 91e9      	LD   R30,Y+
000082 bfef      	OUT  SREG,R30
000083 91f9      	LD   R31,Y+
000084 91e9      	LD   R30,Y+
000085 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char  read_adc(unsigned char adc_input)
                 ; 0000 0021 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0022 ADMUX=adc_input | ADC_VREF_TYPE;
000086 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000087 81e8      	LD   R30,Y
000088 62e0      	ORI  R30,0x20
000089 b9e7      	OUT  0x7,R30
                 ; 0000 0023 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0024 delay_us(10);
                +
00008a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00008b 958a     +DEC R24
00008c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0025 // Start the AD conversion
                 ; 0000 0026 ADCSRA|=(1<<ADSC);
00008d 9a36      	SBI  0x6,6
                 ; 0000 0027 // Wait for the AD conversion to complete
                 ; 0000 0028 while ((ADCSRA & (1<<ADIF))==0);
                 _0x4:
00008e 9b34      	SBIS 0x6,4
00008f cffe      	RJMP _0x4
                 ; 0000 0029 ADCSRA|=(1<<ADIF);
000090 9a34      	SBI  0x6,4
                 ; 0000 002A return ADCH;
000091 b1e5      	IN   R30,0x5
000092 940c 030e 	JMP  _0x20C0001
                 ; 0000 002B }
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 002F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0030 // Declare your local variables here
                 ; 0000 0031 
                 ; 0000 0032 // Input/Output Ports initialization
                 ; 0000 0033 // Port A initialization
                 ; 0000 0034 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0035 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000094 e0e0      	LDI  R30,LOW(0)
000095 bbea      	OUT  0x1A,R30
                 ; 0000 0036 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0037 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000096 bbeb      	OUT  0x1B,R30
                 ; 0000 0038 
                 ; 0000 0039 // Port B initialization
                 ; 0000 003A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000097 bbe7      	OUT  0x17,R30
                 ; 0000 003C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000098 bbe8      	OUT  0x18,R30
                 ; 0000 003E 
                 ; 0000 003F // Port C initialization
                 ; 0000 0040 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0041 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000099 bbe4      	OUT  0x14,R30
                 ; 0000 0042 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0043 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009a bbe5      	OUT  0x15,R30
                 ; 0000 0044 
                 ; 0000 0045 // Port D initialization
                 ; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0047 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00009b bbe1      	OUT  0x11,R30
                 ; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0049 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00009c bbe2      	OUT  0x12,R30
                 ; 0000 004A 
                 ; 0000 004B // Timer/Counter 0 initialization
                 ; 0000 004C // Clock source: System Clock
                 ; 0000 004D // Clock value: 31.250 kHz
                 ; 0000 004E // Mode: Normal top=0xFF
                 ; 0000 004F // OC0 output: Disconnected
                 ; 0000 0050 // Timer Period: 8.192 ms
                 ; 0000 0051 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00009d e0e5      	LDI  R30,LOW(5)
00009e bfe3      	OUT  0x33,R30
                 ; 0000 0052 TCNT0=0x00;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 bfe2      	OUT  0x32,R30
                 ; 0000 0053 OCR0=0x00;
0000a1 bfec      	OUT  0x3C,R30
                 ; 0000 0054 
                 ; 0000 0055 // Timer/Counter 1 initialization
                 ; 0000 0056 // Clock source: System Clock
                 ; 0000 0057 // Clock value: Timer1 Stopped
                 ; 0000 0058 // Mode: Normal top=0xFFFF
                 ; 0000 0059 // OC1A output: Disconnected
                 ; 0000 005A // OC1B output: Disconnected
                 ; 0000 005B // Noise Canceler: Off
                 ; 0000 005C // Input Capture on Falling Edge
                 ; 0000 005D // Timer1 Overflow Interrupt: Off
                 ; 0000 005E // Input Capture Interrupt: Off
                 ; 0000 005F // Compare A Match Interrupt: Off
                 ; 0000 0060 // Compare B Match Interrupt: Off
                 ; 0000 0061 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a2 bdef      	OUT  0x2F,R30
                 ; 0000 0062 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000a3 bdee      	OUT  0x2E,R30
                 ; 0000 0063 TCNT1H=0x00;
0000a4 bded      	OUT  0x2D,R30
                 ; 0000 0064 TCNT1L=0x00;
0000a5 bdec      	OUT  0x2C,R30
                 ; 0000 0065 ICR1H=0x00;
0000a6 bde7      	OUT  0x27,R30
                 ; 0000 0066 ICR1L=0x00;
0000a7 bde6      	OUT  0x26,R30
                 ; 0000 0067 OCR1AH=0x00;
0000a8 bdeb      	OUT  0x2B,R30
                 ; 0000 0068 OCR1AL=0x00;
0000a9 bdea      	OUT  0x2A,R30
                 ; 0000 0069 OCR1BH=0x00;
0000aa bde9      	OUT  0x29,R30
                 ; 0000 006A OCR1BL=0x00;
0000ab bde8      	OUT  0x28,R30
                 ; 0000 006B 
                 ; 0000 006C // Timer/Counter 2 initialization
                 ; 0000 006D // Clock source: System Clock
                 ; 0000 006E // Clock value: Timer2 Stopped
                 ; 0000 006F // Mode: Normal top=0xFF
                 ; 0000 0070 // OC2 output: Disconnected
                 ; 0000 0071 ASSR=0<<AS2;
0000ac bde2      	OUT  0x22,R30
                 ; 0000 0072 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ad bde5      	OUT  0x25,R30
                 ; 0000 0073 TCNT2=0x00;
0000ae bde4      	OUT  0x24,R30
                 ; 0000 0074 OCR2=0x00;
0000af bde3      	OUT  0x23,R30
                 ; 0000 0075 
                 ; 0000 0076 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0077 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000b0 e0e1      	LDI  R30,LOW(1)
0000b1 bfe9      	OUT  0x39,R30
                 ; 0000 0078 
                 ; 0000 0079 // External Interrupt(s) initialization
                 ; 0000 007A // INT0: Off
                 ; 0000 007B // INT1: Off
                 ; 0000 007C // INT2: Off
                 ; 0000 007D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bfe5      	OUT  0x35,R30
                 ; 0000 007E MCUCSR=(0<<ISC2);
0000b4 bfe4      	OUT  0x34,R30
                 ; 0000 007F 
                 ; 0000 0080 // USART initialization
                 ; 0000 0081 // USART disabled
                 ; 0000 0082 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000b5 b9ea      	OUT  0xA,R30
                 ; 0000 0083 
                 ; 0000 0084 // Analog Comparator initialization
                 ; 0000 0085 // Analog Comparator: Off
                 ; 0000 0086 // The Analog Comparator's positive input is
                 ; 0000 0087 // connected to the AIN0 pin
                 ; 0000 0088 // The Analog Comparator's negative input is
                 ; 0000 0089 // connected to the AIN1 pin
                 ; 0000 008A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b6 e8e0      	LDI  R30,LOW(128)
0000b7 b9e8      	OUT  0x8,R30
                 ; 0000 008B 
                 ; 0000 008C // ADC initialization
                 ; 0000 008D // ADC Clock frequency: 1000.000 kHz
                 ; 0000 008E // ADC Voltage Reference: AREF pin
                 ; 0000 008F // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0090 // Only the 8 most significant bits of
                 ; 0000 0091 // the AD conversion result are used
                 ; 0000 0092 ADMUX=ADC_VREF_TYPE;
0000b8 e2e0      	LDI  R30,LOW(32)
0000b9 b9e7      	OUT  0x7,R30
                 ; 0000 0093 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000ba e8e3      	LDI  R30,LOW(131)
0000bb b9e6      	OUT  0x6,R30
                 ; 0000 0094 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000bc e0e0      	LDI  R30,LOW(0)
0000bd bfe0      	OUT  0x30,R30
                 ; 0000 0095 
                 ; 0000 0096 // SPI initialization
                 ; 0000 0097 // SPI disabled
                 ; 0000 0098 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000be b9ed      	OUT  0xD,R30
                 ; 0000 0099 
                 ; 0000 009A // TWI initialization
                 ; 0000 009B // TWI disabled
                 ; 0000 009C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000bf bfe6      	OUT  0x36,R30
                 ; 0000 009D 
                 ; 0000 009E // Alphanumeric LCD initialization
                 ; 0000 009F // Connections are specified in the
                 ; 0000 00A0 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A1 // RS - PORTA Bit 0
                 ; 0000 00A2 // RD - PORTA Bit 1
                 ; 0000 00A3 // EN - PORTA Bit 2
                 ; 0000 00A4 // D4 - PORTA Bit 4
                 ; 0000 00A5 // D5 - PORTA Bit 5
                 ; 0000 00A6 // D6 - PORTA Bit 6
                 ; 0000 00A7 // D7 - PORTA Bit 7
                 ; 0000 00A8 // Characters/line: 8
                 ; 0000 00A9 lcd_init(8);
0000c0 e0a8      	LDI  R26,LOW(8)
0000c1 940e 02e1 	CALL _lcd_init
                 ; 0000 00AA 
                 ; 0000 00AB // Global enable interrupts
                 ; 0000 00AC #asm("sei")
0000c3 9478      	sei
                 ; 0000 00AD 
                 ; 0000 00AE 
                 ; 0000 00AF 
                 ; 0000 00B0 while (1) {
                 _0x7:
                 ; 0000 00B1 
                 ; 0000 00B2       if (count__ ==12){
0000c4 e0ec      	LDI  R30,LOW(12)
0000c5 e0f0      	LDI  R31,HIGH(12)
0000c6 15ea      	CP   R30,R10
0000c7 05fb      	CPC  R31,R11
0000c8 f4c9      	BRNE _0xA
                 ; 0000 00B3             if (pushed >=1){
0000c9 e0e1      	LDI  R30,LOW(1)
0000ca e0f0      	LDI  R31,HIGH(1)
0000cb 168e      	CP   R8,R30
0000cc 069f      	CPC  R9,R31
0000cd f02c      	BRLT _0xB
                 ; 0000 00B4                 x++;
0000ce 01f3      	MOVW R30,R6
0000cf 9631      	ADIW R30,1
0000d0 013f      	MOVW R6,R30
                 ; 0000 00B5                 pushed =0;
0000d1 2488      	CLR  R8
0000d2 2499      	CLR  R9
                 ; 0000 00B6             }
                 ; 0000 00B7 
                 ; 0000 00B8             if (!(x%15)){
                 _0xB:
0000d3 01d3      	MOVW R26,R6
0000d4 e0ef      	LDI  R30,LOW(15)
0000d5 e0f0      	LDI  R31,HIGH(15)
0000d6 940e 0360 	CALL __MODW21U
0000d8 9730      	SBIW R30,0
0000d9 f411      	BRNE _0xC
                 ; 0000 00B9                 x=0;
0000da 2466      	CLR  R6
0000db 2477      	CLR  R7
                 ; 0000 00BA                 //lcd_clear();
                 ; 0000 00BB             }
                 ; 0000 00BC             pushed =0;
                 _0xC:
0000dc 2488      	CLR  R8
0000dd 2499      	CLR  R9
                 ; 0000 00BD             negin =0;
0000de 2444      	CLR  R4
0000df 2455      	CLR  R5
                 ; 0000 00BE             count__ =0;
0000e0 24aa      	CLR  R10
0000e1 24bb      	CLR  R11
                 ; 0000 00BF       }
                 ; 0000 00C0 
                 ; 0000 00C1       lcd_gotoxy(x,0);
                 _0xA:
0000e2 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 00C2       //lcd_putchar('h');
                 ; 0000 00C3       a=read_adc(3);
0000e4 e0a3      	LDI  R26,LOW(3)
0000e5 dfa0      	RCALL _read_adc
0000e6 2ece      	MOV  R12,R30
0000e7 24dd      	CLR  R13
                 ; 0000 00C4       itoa(a,c);
0000e8 92da      	ST   -Y,R13
0000e9 92ca      	ST   -Y,R12
0000ea e6a0      	LDI  R26,LOW(_c)
0000eb e0b1      	LDI  R27,HIGH(_c)
0000ec 940e 0255 	CALL _itoa
                 ; 0000 00C5       if (c[0]=='2' && c[1]=='5' && c[2]=='3'){
0000ee 91a0 0160 	LDS  R26,_c
0000f0 33a2      	CPI  R26,LOW(0x32)
0000f1 f441      	BRNE _0xE
                +
0000f2 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
0000f4 33a5      	CPI  R26,LOW(0x35)
0000f5 f421      	BRNE _0xE
                +
0000f6 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
0000f8 33a3      	CPI  R26,LOW(0x33)
0000f9 f009      	BREQ _0xF
                 _0xE:
0000fa c016      	RJMP _0xD
                 _0xF:
                 ; 0000 00C6              if (pushed>=900){
0000fb 940e 0314 	CALL SUBOPT_0x1
0000fd f034      	BRLT _0x10
                 ; 0000 00C7                      lcd_gotoxy(x,0);
0000fe 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 00C8                     lcd_putchar('1');
000100 e3a1      	LDI  R26,LOW(49)
000101 940e 02c2 	CALL _lcd_putchar
                 ; 0000 00C9                     continue;
000103 cfc0      	RJMP _0x7
                 ; 0000 00CA 
                 ; 0000 00CB              }
                 ; 0000 00CC              lcd_putchar('A'+negin);
                 _0x10:
000104 2da4      	MOV  R26,R4
000105 5baf      	SUBI R26,-LOW(65)
000106 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 00CD              pushed++;
                 ; 0000 00CE              if (pushed %60==59)
000108 f411      	BRNE _0x11
                 ; 0000 00CF                 negin++;
000109 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 00D0              if (negin==3)
                 _0x11:
00010b 940e 032c 	CALL SUBOPT_0x4
00010d f411      	BRNE _0x12
                 ; 0000 00D1                 negin =0;
00010e 2444      	CLR  R4
00010f 2455      	CLR  R5
                 ; 0000 00D2 
                 ; 0000 00D3       }
                 _0x12:
                 ; 0000 00D4       else if (   c[0]=='1' && c[1]=='2' && c[2]=='8') {
000110 c142      	RJMP _0x13
                 _0xD:
000111 91a0 0160 	LDS  R26,_c
000113 33a1      	CPI  R26,LOW(0x31)
000114 f441      	BRNE _0x15
                +
000115 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
000117 33a2      	CPI  R26,LOW(0x32)
000118 f421      	BRNE _0x15
                +
000119 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
00011b 33a8      	CPI  R26,LOW(0x38)
00011c f009      	BREQ _0x16
                 _0x15:
00011d c016      	RJMP _0x14
                 _0x16:
                 ; 0000 00D5                if (pushed>=900){
00011e 940e 0314 	CALL SUBOPT_0x1
000120 f034      	BRLT _0x17
                 ; 0000 00D6                      lcd_gotoxy(x,0);
000121 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 00D7                     lcd_putchar('2');
000123 e3a2      	LDI  R26,LOW(50)
000124 940e 02c2 	CALL _lcd_putchar
                 ; 0000 00D8                       continue;
000126 cf9d      	RJMP _0x7
                 ; 0000 00D9 
                 ; 0000 00DA                 }
                 ; 0000 00DB              lcd_putchar('D'+negin);
                 _0x17:
000127 2da4      	MOV  R26,R4
000128 5bac      	SUBI R26,-LOW(68)
000129 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 00DC               pushed++;
                 ; 0000 00DD                if (pushed %60==59)
00012b f411      	BRNE _0x18
                 ; 0000 00DE                negin++;
00012c 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 00DF               if (negin==3)
                 _0x18:
00012e 940e 032c 	CALL SUBOPT_0x4
000130 f411      	BRNE _0x19
                 ; 0000 00E0                 negin =0;
000131 2444      	CLR  R4
000132 2455      	CLR  R5
                 ; 0000 00E1 
                 ; 0000 00E2              }
                 _0x19:
                 ; 0000 00E3 
                 ; 0000 00E4       else if (   c[0]=='8' && c[1]=='1'){
000133 c11f      	RJMP _0x1A
                 _0x14:
000134 91a0 0160 	LDS  R26,_c
000136 33a8      	CPI  R26,LOW(0x38)
000137 f421      	BRNE _0x1C
                +
000138 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
00013a 33a1      	CPI  R26,LOW(0x31)
00013b f009      	BREQ _0x1D
                 _0x1C:
00013c c016      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00E5              if (pushed>=900){
00013d 940e 0314 	CALL SUBOPT_0x1
00013f f034      	BRLT _0x1E
                 ; 0000 00E6                     lcd_gotoxy(x,0);
000140 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 00E7                     lcd_putchar('3');
000142 e3a3      	LDI  R26,LOW(51)
000143 940e 02c2 	CALL _lcd_putchar
                 ; 0000 00E8                     continue;
000145 cf7e      	RJMP _0x7
                 ; 0000 00E9              }
                 ; 0000 00EA              lcd_putchar('G'+negin);
                 _0x1E:
000146 2da4      	MOV  R26,R4
000147 5ba9      	SUBI R26,-LOW(71)
000148 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 00EB               pushed++;
                 ; 0000 00EC                if (pushed %60==59)
00014a f411      	BRNE _0x1F
                 ; 0000 00ED                negin++;
00014b 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 00EE               if (negin==3)
                 _0x1F:
00014d 940e 032c 	CALL SUBOPT_0x4
00014f f411      	BRNE _0x20
                 ; 0000 00EF                 negin =0;
000150 2444      	CLR  R4
000151 2455      	CLR  R5
                 ; 0000 00F0 
                 ; 0000 00F1       }
                 _0x20:
                 ; 0000 00F2       else if (   c[0]=='2' && c[1]=='0' && c[2]=='3'){
000152 c100      	RJMP _0x21
                 _0x1B:
000153 91a0 0160 	LDS  R26,_c
000155 33a2      	CPI  R26,LOW(0x32)
000156 f441      	BRNE _0x23
                +
000157 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
000159 33a0      	CPI  R26,LOW(0x30)
00015a f421      	BRNE _0x23
                +
00015b 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
00015d 33a3      	CPI  R26,LOW(0x33)
00015e f009      	BREQ _0x24
                 _0x23:
00015f c016      	RJMP _0x22
                 _0x24:
                 ; 0000 00F3                if (pushed>=900){
000160 940e 0314 	CALL SUBOPT_0x1
000162 f034      	BRLT _0x25
                 ; 0000 00F4                      lcd_gotoxy(x,0);
000163 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 00F5                     lcd_putchar('4');
000165 e3a4      	LDI  R26,LOW(52)
000166 940e 02c2 	CALL _lcd_putchar
                 ; 0000 00F6                     continue;
000168 cf5b      	RJMP _0x7
                 ; 0000 00F7 
                 ; 0000 00F8                 }
                 ; 0000 00F9              lcd_putchar('J'+negin);
                 _0x25:
000169 2da4      	MOV  R26,R4
00016a 5ba6      	SUBI R26,-LOW(74)
00016b 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 00FA                pushed++;
                 ; 0000 00FB                 if (pushed%60==59)
00016d f411      	BRNE _0x26
                 ; 0000 00FC                 negin++;
00016e 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 00FD               if (negin==3)
                 _0x26:
000170 940e 032c 	CALL SUBOPT_0x4
000172 f411      	BRNE _0x27
                 ; 0000 00FE                 negin =0;
000173 2444      	CLR  R4
000174 2455      	CLR  R5
                 ; 0000 00FF 
                 ; 0000 0100       }
                 _0x27:
                 ; 0000 0101       else if (   c[0]=='1' && c[1]=='1' && c[2]=='4'){
000175 c0dd      	RJMP _0x28
                 _0x22:
000176 91a0 0160 	LDS  R26,_c
000178 33a1      	CPI  R26,LOW(0x31)
000179 f441      	BRNE _0x2A
                +
00017a 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
00017c 33a1      	CPI  R26,LOW(0x31)
00017d f421      	BRNE _0x2A
                +
00017e 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
000180 33a4      	CPI  R26,LOW(0x34)
000181 f009      	BREQ _0x2B
                 _0x2A:
000182 c016      	RJMP _0x29
                 _0x2B:
                 ; 0000 0102              if (pushed>=900){
000183 940e 0314 	CALL SUBOPT_0x1
000185 f034      	BRLT _0x2C
                 ; 0000 0103                      lcd_gotoxy(x,0);
000186 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 0104                     lcd_putchar('5');
000188 e3a5      	LDI  R26,LOW(53)
000189 940e 02c2 	CALL _lcd_putchar
                 ; 0000 0105                       continue;
00018b cf38      	RJMP _0x7
                 ; 0000 0106 
                 ; 0000 0107                 }
                 ; 0000 0108              lcd_putchar('M'+negin);
                 _0x2C:
00018c 2da4      	MOV  R26,R4
00018d 5ba3      	SUBI R26,-LOW(77)
00018e 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 0109               pushed++;
                 ; 0000 010A                if (pushed %60==59)
000190 f411      	BRNE _0x2D
                 ; 0000 010B                negin++;
000191 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 010C               if (negin==3)
                 _0x2D:
000193 940e 032c 	CALL SUBOPT_0x4
000195 f411      	BRNE _0x2E
                 ; 0000 010D                 negin =0;
000196 2444      	CLR  R4
000197 2455      	CLR  R5
                 ; 0000 010E 
                 ; 0000 010F       }
                 _0x2E:
                 ; 0000 0110       else if (   c[0]=='7' && c[1]=='5') {
000198 c0ba      	RJMP _0x2F
                 _0x29:
000199 91a0 0160 	LDS  R26,_c
00019b 33a7      	CPI  R26,LOW(0x37)
00019c f421      	BRNE _0x31
                +
00019d 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
00019f 33a5      	CPI  R26,LOW(0x35)
0001a0 f009      	BREQ _0x32
                 _0x31:
0001a1 c016      	RJMP _0x30
                 _0x32:
                 ; 0000 0111             if (pushed>=900){
0001a2 940e 0314 	CALL SUBOPT_0x1
0001a4 f034      	BRLT _0x33
                 ; 0000 0112                      lcd_gotoxy(x,0);
0001a5 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 0113                     lcd_putchar('6');
0001a7 e3a6      	LDI  R26,LOW(54)
0001a8 940e 02c2 	CALL _lcd_putchar
                 ; 0000 0114                     continue;
0001aa cf19      	RJMP _0x7
                 ; 0000 0115 
                 ; 0000 0116                 }
                 ; 0000 0117              lcd_putchar('P'+negin);
                 _0x33:
0001ab 2da4      	MOV  R26,R4
0001ac 5ba0      	SUBI R26,-LOW(80)
0001ad 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 0118               pushed++;
                 ; 0000 0119                if (pushed %60==59)
0001af f411      	BRNE _0x34
                 ; 0000 011A                negin++;
0001b0 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 011B               if (negin==3)
                 _0x34:
0001b2 940e 032c 	CALL SUBOPT_0x4
0001b4 f411      	BRNE _0x35
                 ; 0000 011C                 negin =0;
0001b5 2444      	CLR  R4
0001b6 2455      	CLR  R5
                 ; 0000 011D 
                 ; 0000 011E       }
                 _0x35:
                 ; 0000 011F       else if (   c[0]=='1' && c[1]=='4' && c[2]=='5'){
0001b7 c09b      	RJMP _0x36
                 _0x30:
0001b8 91a0 0160 	LDS  R26,_c
0001ba 33a1      	CPI  R26,LOW(0x31)
0001bb f441      	BRNE _0x38
                +
0001bc 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
0001be 33a4      	CPI  R26,LOW(0x34)
0001bf f421      	BRNE _0x38
                +
0001c0 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
0001c2 33a5      	CPI  R26,LOW(0x35)
0001c3 f009      	BREQ _0x39
                 _0x38:
0001c4 c016      	RJMP _0x37
                 _0x39:
                 ; 0000 0120              if (pushed>=900){
0001c5 940e 0314 	CALL SUBOPT_0x1
0001c7 f034      	BRLT _0x3A
                 ; 0000 0121                      lcd_gotoxy(x,0);
0001c8 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 0122                     lcd_putchar('7');
0001ca e3a7      	LDI  R26,LOW(55)
0001cb 940e 02c2 	CALL _lcd_putchar
                 ; 0000 0123                     continue;
0001cd cef6      	RJMP _0x7
                 ; 0000 0124 
                 ; 0000 0125              }
                 ; 0000 0126              lcd_putchar('S'+negin);
                 _0x3A:
0001ce 2da4      	MOV  R26,R4
0001cf 5aad      	SUBI R26,-LOW(83)
0001d0 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 0127               pushed++;
                 ; 0000 0128                if (pushed %60==59)
0001d2 f411      	BRNE _0x3B
                 ; 0000 0129                  negin++;
0001d3 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 012A               if (negin==3)
                 _0x3B:
0001d5 940e 032c 	CALL SUBOPT_0x4
0001d7 f411      	BRNE _0x3C
                 ; 0000 012B                 negin =0;
0001d8 2444      	CLR  R4
0001d9 2455      	CLR  R5
                 ; 0000 012C       }
                 _0x3C:
                 ; 0000 012D       else if (   c[0]=='9' && c[1]=='3'){
0001da c078      	RJMP _0x3D
                 _0x37:
0001db 91a0 0160 	LDS  R26,_c
0001dd 33a9      	CPI  R26,LOW(0x39)
0001de f421      	BRNE _0x3F
                +
0001df 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
0001e1 33a3      	CPI  R26,LOW(0x33)
0001e2 f009      	BREQ _0x40
                 _0x3F:
0001e3 c016      	RJMP _0x3E
                 _0x40:
                 ; 0000 012E              if (pushed>=900){
0001e4 940e 0314 	CALL SUBOPT_0x1
0001e6 f034      	BRLT _0x41
                 ; 0000 012F                      lcd_gotoxy(x,0);
0001e7 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 0130                     lcd_putchar('8');
0001e9 e3a8      	LDI  R26,LOW(56)
0001ea 940e 02c2 	CALL _lcd_putchar
                 ; 0000 0131                       continue;
0001ec ced7      	RJMP _0x7
                 ; 0000 0132                 }
                 ; 0000 0133              lcd_putchar('T'+negin);
                 _0x41:
0001ed 2da4      	MOV  R26,R4
0001ee 5aac      	SUBI R26,-LOW(84)
0001ef 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 0134               pushed++;
                 ; 0000 0135                if (pushed %60==59)
0001f1 f411      	BRNE _0x42
                 ; 0000 0136                negin++;
0001f2 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 0137               if (negin==3)
                 _0x42:
0001f4 940e 032c 	CALL SUBOPT_0x4
0001f6 f411      	BRNE _0x43
                 ; 0000 0138                 negin =0;
0001f7 2444      	CLR  R4
0001f8 2455      	CLR  R5
                 ; 0000 0139 
                 ; 0000 013A       }
                 _0x43:
                 ; 0000 013B       else if (   c[0]=='6' && c[1]=='5'){
0001f9 c059      	RJMP _0x44
                 _0x3E:
0001fa 91a0 0160 	LDS  R26,_c
0001fc 33a6      	CPI  R26,LOW(0x36)
0001fd f421      	BRNE _0x46
                +
0001fe 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
000200 33a5      	CPI  R26,LOW(0x35)
000201 f009      	BREQ _0x47
                 _0x46:
000202 c016      	RJMP _0x45
                 _0x47:
                 ; 0000 013C               if (pushed>=900){
000203 940e 0314 	CALL SUBOPT_0x1
000205 f034      	BRLT _0x48
                 ; 0000 013D                      lcd_gotoxy(x,0);
000206 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 013E                     lcd_putchar('9');
000208 e3a9      	LDI  R26,LOW(57)
000209 940e 02c2 	CALL _lcd_putchar
                 ; 0000 013F                       continue;
00020b ceb8      	RJMP _0x7
                 ; 0000 0140                 }
                 ; 0000 0141              lcd_putchar('W'+negin);
                 _0x48:
00020c 2da4      	MOV  R26,R4
00020d 5aa9      	SUBI R26,-LOW(87)
00020e 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 0142               pushed++;
                 ; 0000 0143                if (pushed %60==59)
000210 f411      	BRNE _0x49
                 ; 0000 0144                  negin++;
000211 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 0145               if (negin==3)
                 _0x49:
000213 940e 032c 	CALL SUBOPT_0x4
000215 f411      	BRNE _0x4A
                 ; 0000 0146                 negin =0;
000216 2444      	CLR  R4
000217 2455      	CLR  R5
                 ; 0000 0147 
                 ; 0000 0148       }
                 _0x4A:
                 ; 0000 0149       else if (   c[0]=='2' && c[1]=='4' && c[2]=='1'){
000218 c03a      	RJMP _0x4B
                 _0x45:
000219 91a0 0160 	LDS  R26,_c
00021b 33a2      	CPI  R26,LOW(0x32)
00021c f441      	BRNE _0x4D
                +
00021d 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
00021f 33a4      	CPI  R26,LOW(0x34)
000220 f421      	BRNE _0x4D
                +
000221 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
000223 33a1      	CPI  R26,LOW(0x31)
000224 f009      	BREQ _0x4E
                 _0x4D:
000225 c00f      	RJMP _0x4C
                 _0x4E:
                 ; 0000 014A              lcd_putchar('Y'+negin);
000226 2da4      	MOV  R26,R4
000227 5aa7      	SUBI R26,-LOW(89)
000228 940e 0319 	CALL SUBOPT_0x2
                 ; 0000 014B               pushed++;
                 ; 0000 014C                if (pushed %60==59)
00022a f411      	BRNE _0x4F
                 ; 0000 014D                  negin++;
00022b 940e 0327 	CALL SUBOPT_0x3
                 ; 0000 014E               if (negin==2)
                 _0x4F:
00022d e0e2      	LDI  R30,LOW(2)
00022e e0f0      	LDI  R31,HIGH(2)
00022f 15e4      	CP   R30,R4
000230 05f5      	CPC  R31,R5
000231 f411      	BRNE _0x50
                 ; 0000 014F                 negin =0;
000232 2444      	CLR  R4
000233 2455      	CLR  R5
                 ; 0000 0150       }
                 _0x50:
                 ; 0000 0151       else if (   c[0]=='1' && c[1]=='2' && c[2]=='5'){
000234 c01e      	RJMP _0x51
                 _0x4C:
000235 91a0 0160 	LDS  R26,_c
000237 33a1      	CPI  R26,LOW(0x31)
000238 f441      	BRNE _0x53
                +
000239 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
00023b 33a2      	CPI  R26,LOW(0x32)
00023c f421      	BRNE _0x53
                +
00023d 91a0 0162+LDS R26 , _c + ( 2 )
                 	__GETB2MN _c,2
00023f 33a5      	CPI  R26,LOW(0x35)
000240 f009      	BREQ _0x54
                 _0x53:
000241 c002      	RJMP _0x52
                 _0x54:
                 ; 0000 0152              lcd_putchar('0');
000242 e3a0      	LDI  R26,LOW(48)
000243 c00a      	RJMP _0x5A
                 ; 0000 0153               pushed=1;
                 ; 0000 0154 
                 ; 0000 0155       }
                 ; 0000 0156       else if (   c[0]=='7' && c[1]=='9'){
                 _0x52:
000244 91a0 0160 	LDS  R26,_c
000246 33a7      	CPI  R26,LOW(0x37)
000247 f421      	BRNE _0x57
                +
000248 91a0 0161+LDS R26 , _c + ( 1 )
                 	__GETB2MN _c,1
00024a 33a9      	CPI  R26,LOW(0x39)
00024b f009      	BREQ _0x58
                 _0x57:
00024c c006      	RJMP _0x56
                 _0x58:
                 ; 0000 0157              lcd_putchar('#');
00024d e2a3      	LDI  R26,LOW(35)
                 _0x5A:
00024e 940e 02c2 	CALL _lcd_putchar
                 ; 0000 0158               pushed=1;
000250 e0e1      	LDI  R30,LOW(1)
000251 e0f0      	LDI  R31,HIGH(1)
000252 014f      	MOVW R8,R30
                 ; 0000 0159       }
                 ; 0000 015A 
                 ; 0000 015B 
                 ; 0000 015C //      lcd_putchar(c[2]);
                 ; 0000 015D //      lcd_gotoxy(1,0);
                 ; 0000 015E //      lcd_putchar(c[1]);
                 ; 0000 015F //       lcd_gotoxy(2,0);
                 ; 0000 0160 //        lcd_putchar(c[0]);
                 ; 0000 0161      // delay_ms(50);
                 ; 0000 0162      // lcd_clear();
                 ; 0000 0163       // Place your code here
                 ; 0000 0164 
                 ; 0000 0165       }
                 _0x56:
                 _0x51:
                 _0x4B:
                 _0x44:
                 _0x3D:
                 _0x36:
                 _0x2F:
                 _0x28:
                 _0x21:
                 _0x1A:
                 _0x13:
000253 ce70      	RJMP _0x7
                 ; 0000 0166 }
                 _0x59:
000254 cfff      	RJMP _0x59
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000255 93ba      	ST   -Y,R27
000256 93aa      	ST   -Y,R26
000257 91a9          ld   r26,y+
000258 91b9          ld   r27,y+
000259 91e9          ld   r30,y+
00025a 91f9          ld   r31,y+
00025b 9630          adiw r30,0
00025c f42a          brpl __itoa0
00025d 95e0          com  r30
00025e 95f0          com  r31
00025f 9631          adiw r30,1
000260 e26d          ldi  r22,'-'
000261 936d          st   x+,r22
                 __itoa0:
000262 94e8          clt
000263 e180          ldi  r24,low(10000)
000264 e297          ldi  r25,high(10000)
000265 d00d          rcall __itoa1
000266 ee88          ldi  r24,low(1000)
000267 e093          ldi  r25,high(1000)
000268 d00a          rcall __itoa1
000269 e684          ldi  r24,100
00026a 2799          clr  r25
00026b d007          rcall __itoa1
00026c e08a          ldi  r24,10
00026d d005          rcall __itoa1
00026e 2f6e          mov  r22,r30
00026f d010          rcall __itoa5
000270 2766          clr  r22
000271 936c          st   x,r22
000272 9508          ret
                 
                 __itoa1:
000273 2766          clr	 r22
                 __itoa2:
000274 17e8          cp   r30,r24
000275 07f9          cpc  r31,r25
000276 f020          brlo __itoa3
000277 9563          inc  r22
000278 1be8          sub  r30,r24
000279 0bf9          sbc  r31,r25
00027a f7c9          brne __itoa2
                 __itoa3:
00027b 2366          tst  r22
00027c f411          brne __itoa4
00027d f016          brts __itoa5
00027e 9508          ret
                 __itoa4:
00027f 9468          set
                 __itoa5:
000280 5d60          subi r22,-0x30
000281 936d          st   x+,r22
000282 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
000283 93aa      	ST   -Y,R26
000284 b3eb      	IN   R30,0x1B
000285 70ef      	ANDI R30,LOW(0xF)
000286 2fae      	MOV  R26,R30
000287 81e8      	LD   R30,Y
000288 7fe0      	ANDI R30,LOW(0xF0)
000289 2bea      	OR   R30,R26
00028a bbeb      	OUT  0x1B,R30
                +
00028b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00028c 958a     +DEC R24
00028d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00028e 9ada      	SBI  0x1B,2
                +
00028f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000290 958a     +DEC R24
000291 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000292 98da      	CBI  0x1B,2
                +
000293 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000294 958a     +DEC R24
000295 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000296 c077      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000297 93aa      	ST   -Y,R26
000298 81a8      	LD   R26,Y
000299 dfe9      	RCALL __lcd_write_nibble_G102
00029a 81e8          ld    r30,y
00029b 95e2          swap  r30
00029c 83e8          st    y,r30
00029d 81a8      	LD   R26,Y
00029e dfe4      	RCALL __lcd_write_nibble_G102
                +
00029f e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002a0 958a     +DEC R24
0002a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002a2 c06b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002a3 93aa      	ST   -Y,R26
0002a4 81e8      	LD   R30,Y
0002a5 e0f0      	LDI  R31,0
0002a6 59e2      	SUBI R30,LOW(-__base_y_G102)
0002a7 4ffe      	SBCI R31,HIGH(-__base_y_G102)
0002a8 81e0      	LD   R30,Z
0002a9 81a9      	LDD  R26,Y+1
0002aa 0fae      	ADD  R26,R30
0002ab dfeb      	RCALL __lcd_write_data
0002ac 81e9      	LDD  R30,Y+1
0002ad 93e0 0172 	STS  __lcd_x,R30
0002af 81e8      	LD   R30,Y
0002b0 93e0 0173 	STS  __lcd_y,R30
0002b2 9622      	ADIW R28,2
0002b3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002b4 e0a2      	LDI  R26,LOW(2)
0002b5 940e 0331 	CALL SUBOPT_0x5
0002b7 e0ac      	LDI  R26,LOW(12)
0002b8 dfde      	RCALL __lcd_write_data
0002b9 e0a1      	LDI  R26,LOW(1)
0002ba 940e 0331 	CALL SUBOPT_0x5
0002bc e0e0      	LDI  R30,LOW(0)
0002bd 93e0 0173 	STS  __lcd_y,R30
0002bf 93e0 0172 	STS  __lcd_x,R30
0002c1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002c2 93aa      	ST   -Y,R26
0002c3 81a8      	LD   R26,Y
0002c4 30aa      	CPI  R26,LOW(0xA)
0002c5 f031      	BREQ _0x2040005
0002c6 91e0 0174 	LDS  R30,__lcd_maxx
0002c8 91a0 0172 	LDS  R26,__lcd_x
0002ca 17ae      	CP   R26,R30
0002cb f058      	BRLO _0x2040004
                 _0x2040005:
0002cc e0e0      	LDI  R30,LOW(0)
0002cd 93ea      	ST   -Y,R30
0002ce 91a0 0173 	LDS  R26,__lcd_y
0002d0 5faf      	SUBI R26,-LOW(1)
0002d1 93a0 0173 	STS  __lcd_y,R26
0002d3 dfcf      	RCALL _lcd_gotoxy
0002d4 81a8      	LD   R26,Y
0002d5 30aa      	CPI  R26,LOW(0xA)
0002d6 f1b9      	BREQ _0x20C0001
                 _0x2040004:
0002d7 91e0 0172 	LDS  R30,__lcd_x
0002d9 5fef      	SUBI R30,-LOW(1)
0002da 93e0 0172 	STS  __lcd_x,R30
0002dc 9ad8      	SBI  0x1B,0
0002dd 81a8      	LD   R26,Y
0002de dfb8      	RCALL __lcd_write_data
0002df 98d8      	CBI  0x1B,0
0002e0 c02d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002e1 93aa      	ST   -Y,R26
0002e2 b3ea      	IN   R30,0x1A
0002e3 6fe0      	ORI  R30,LOW(0xF0)
0002e4 bbea      	OUT  0x1A,R30
0002e5 9ad2      	SBI  0x1A,2
0002e6 9ad0      	SBI  0x1A,0
0002e7 9ad1      	SBI  0x1A,1
0002e8 98da      	CBI  0x1B,2
0002e9 98d8      	CBI  0x1B,0
0002ea 98d9      	CBI  0x1B,1
0002eb 81e8      	LD   R30,Y
0002ec 93e0 0174 	STS  __lcd_maxx,R30
0002ee 58e0      	SUBI R30,-LOW(128)
                +
0002ef 93e0 0170+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
0002f1 81e8      	LD   R30,Y
0002f2 54e0      	SUBI R30,-LOW(192)
                +
0002f3 93e0 0171+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
0002f5 e1a4      	LDI  R26,LOW(20)
0002f6 e0b0      	LDI  R27,0
0002f7 940e 033f 	CALL _delay_ms
0002f9 940e 0337 	CALL SUBOPT_0x6
0002fb 940e 0337 	CALL SUBOPT_0x6
0002fd 940e 0337 	CALL SUBOPT_0x6
0002ff e2a0      	LDI  R26,LOW(32)
000300 df82      	RCALL __lcd_write_nibble_G102
                +
000301 ec88     +LDI R24 , LOW ( 200 )
000302 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000303 9701     +SBIW R24 , 1
000304 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000305 e2a8      	LDI  R26,LOW(40)
000306 df90      	RCALL __lcd_write_data
000307 e0a4      	LDI  R26,LOW(4)
000308 df8e      	RCALL __lcd_write_data
000309 e8a5      	LDI  R26,LOW(133)
00030a df8c      	RCALL __lcd_write_data
00030b e0a6      	LDI  R26,LOW(6)
00030c df8a      	RCALL __lcd_write_data
00030d dfa6      	RCALL _lcd_clear
                 _0x20C0001:
00030e 9621      	ADIW R28,1
00030f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _c:
000160           	.BYTE 0xA
                 __seed_G100:
00016a           	.BYTE 0x4
                 __base_y_G102:
00016e           	.BYTE 0x4
                 __lcd_x:
000172           	.BYTE 0x1
                 __lcd_y:
000173           	.BYTE 0x1
                 __lcd_maxx:
000174           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
000310 926a      	ST   -Y,R6
000311 e0a0      	LDI  R26,LOW(0)
000312 940c 02a3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000314 e8e4      	LDI  R30,LOW(900)
000315 e0f3      	LDI  R31,HIGH(900)
000316 168e      	CP   R8,R30
000317 069f      	CPC  R9,R31
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:96 WORDS
                 SUBOPT_0x2:
000319 940e 02c2 	CALL _lcd_putchar
00031b 01f4      	MOVW R30,R8
00031c 9631      	ADIW R30,1
00031d 014f      	MOVW R8,R30
00031e 01d4      	MOVW R26,R8
00031f e3ec      	LDI  R30,LOW(60)
000320 e0f0      	LDI  R31,HIGH(60)
000321 940e 0363 	CALL __MODW21
000323 33eb      	CPI  R30,LOW(0x3B)
000324 e0a0      	LDI  R26,HIGH(0x3B)
000325 07fa      	CPC  R31,R26
000326 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3:
000327 01f2      	MOVW R30,R4
000328 9631      	ADIW R30,1
000329 012f      	MOVW R4,R30
00032a 9731      	SBIW R30,1
00032b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
00032c e0e3      	LDI  R30,LOW(3)
00032d e0f0      	LDI  R31,HIGH(3)
00032e 15e4      	CP   R30,R4
00032f 05f5      	CPC  R31,R5
000330 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000331 940e 0297 	CALL __lcd_write_data
000333 e0a3      	LDI  R26,LOW(3)
000334 e0b0      	LDI  R27,0
000335 940c 033f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000337 e3a0      	LDI  R26,LOW(48)
000338 940e 0283 	CALL __lcd_write_nibble_G102
                +
00033a ec88     +LDI R24 , LOW ( 200 )
00033b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00033c 9701     +SBIW R24 , 1
00033d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00033e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00033f 9610      	adiw r26,0
000340 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000341 ed80     +LDI R24 , LOW ( 0x7D0 )
000342 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000343 9701     +SBIW R24 , 1
000344 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000345 95a8      	wdr
000346 9711      	sbiw r26,1
000347 f7c9      	brne __delay_ms0
                 __delay_ms1:
000348 9508      	ret
                 
                 __ANEGW1:
000349 95f1      	NEG  R31
00034a 95e1      	NEG  R30
00034b 40f0      	SBCI R31,0
00034c 9508      	RET
                 
                 __DIVW21U:
00034d 2400      	CLR  R0
00034e 2411      	CLR  R1
00034f e190      	LDI  R25,16
                 __DIVW21U1:
000350 0faa      	LSL  R26
000351 1fbb      	ROL  R27
000352 1c00      	ROL  R0
000353 1c11      	ROL  R1
000354 1a0e      	SUB  R0,R30
000355 0a1f      	SBC  R1,R31
000356 f418      	BRCC __DIVW21U2
000357 0e0e      	ADD  R0,R30
000358 1e1f      	ADC  R1,R31
000359 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00035a 60a1      	SBR  R26,1
                 __DIVW21U3:
00035b 959a      	DEC  R25
00035c f799      	BRNE __DIVW21U1
00035d 01fd      	MOVW R30,R26
00035e 01d0      	MOVW R26,R0
00035f 9508      	RET
                 
                 __MODW21U:
000360 dfec      	RCALL __DIVW21U
000361 01fd      	MOVW R30,R26
000362 9508      	RET
                 
                 __MODW21:
000363 94e8      	CLT
000364 ffb7      	SBRS R27,7
000365 c004      	RJMP __MODW211
000366 95a0      	COM  R26
000367 95b0      	COM  R27
000368 9611      	ADIW R26,1
000369 9468      	SET
                 __MODW211:
00036a fdf7      	SBRC R31,7
00036b dfdd      	RCALL __ANEGW1
00036c dfe0      	RCALL __DIVW21U
00036d 01fd      	MOVW R30,R26
00036e f40e      	BRTC __MODW212
00036f dfd9      	RCALL __ANEGW1
                 __MODW212:
000370 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   9 r1 :   5 r2 :   0 r3 :   0 r4 :  25 r5 :  13 r6 :   5 r7 :   1 
r8 :   9 r9 :   5 r10:   4 r11:   2 r12:   2 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  29 r25:  12 r26: 149 r27:  10 r28:   3 r29:   1 r30: 151 r31:  32 
x  :   6 y  :  37 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :  10 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :  11 brmi  :   0 brne  :  56 brpl  :   1 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  71 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  38 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   8 cpc   :   8 cpi   :  34 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  25 ld    :  20 ldd   :   2 ldi   :  91 
lds   :  35 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  13 movw  :  18 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  45 pop   :   0 push  :   0 rcall :  22 ret   :  16 
reti  :   1 rjmp  :  41 rol   :   3 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  22 std   :   0 sts   :   9 sub   :   2 subi  :  16 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 59 out of 116 (50.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006e2   1702     60   1762   16384  10.8%
[.dseg] 0x000060 0x000175      0     21     21    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
