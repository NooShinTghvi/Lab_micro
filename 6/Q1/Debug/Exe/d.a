;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/18/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdlib.h>
;// Declare your global variables here
; int num;
;char strZ;
;char flash *strX;
;char *negin;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027 // Reinitialize Timer 0 value
; 0000 0028 TCNT0=0xB2;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0029 // Place your code here
; 0000 002A 
; 0000 002B }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0032 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0033 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000016 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0034 // Delay needed for the stabilization of the ADC input voltage
; 0000 0035 delay_us(10);
;PCODE: $0000001A VOL: 0
; 0000 0036 // Start the AD conversion
; 0000 0037 ADCSRA|=(1<<ADSC);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0038 // Wait for the AD conversion to complete
; 0000 0039 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003A ADCSRA|=(1<<ADIF);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003B return ADCW;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003C }
;PCODE: $00000028 VOL: 0
;void main(void)
; 0000 003E {
;PCODE: $00000029 VOL: 0
; 0000 003F // Declare your local variables here
; 0000 0040 
; 0000 0041 // Input/Output Ports initialization
; 0000 0042 // Port A initialization
; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0044 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0046 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0047 
; 0000 0048 // Port B initialization
; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004D 
; 0000 004E // Port C initialization
; 0000 004F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0050 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0052 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0053 
; 0000 0054 // Port D initialization
; 0000 0055 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0056 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0057 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0058 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0059 
; 0000 005A // Timer/Counter 0 initialization
; 0000 005B // Clock source: System Clock
; 0000 005C // Clock value: 7.813 kHz
; 0000 005D // Mode: Normal top=0xFF
; 0000 005E // OC0 output: Disconnected
; 0000 005F // Timer Period: 9.984 ms
; 0000 0060 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0061 TCNT0=0xB2;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0062 OCR0=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0063 
; 0000 0064 // Timer/Counter 1 initialization
; 0000 0065 // Clock source: System Clock
; 0000 0066 // Clock value: Timer1 Stopped
; 0000 0067 // Mode: Normal top=0xFFFF
; 0000 0068 // OC1A output: Disconnected
; 0000 0069 // OC1B output: Disconnected
; 0000 006A // Noise Canceler: Off
; 0000 006B // Input Capture on Falling Edge
; 0000 006C // Timer1 Overflow Interrupt: Off
; 0000 006D // Input Capture Interrupt: Off
; 0000 006E // Compare A Match Interrupt: Off
; 0000 006F // Compare B Match Interrupt: Off
; 0000 0070 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0071 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0072 TCNT1H=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0073 TCNT1L=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0074 ICR1H=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0075 ICR1L=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0076 OCR1AH=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0077 OCR1AL=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0078 OCR1BH=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0079 OCR1BL=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007A 
; 0000 007B // Timer/Counter 2 initialization
; 0000 007C // Clock source: System Clock
; 0000 007D // Clock value: Timer2 Stopped
; 0000 007E // Mode: Normal top=0xFF
; 0000 007F // OC2 output: Disconnected
; 0000 0080 ASSR=0<<AS2;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0081 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0082 TCNT2=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0083 OCR2=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0084 
; 0000 0085 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0086 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0087 
; 0000 0088 // External Interrupt(s) initialization
; 0000 0089 // INT0: Off
; 0000 008A // INT1: Off
; 0000 008B // INT2: Off
; 0000 008C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008D MCUCSR=(0<<ISC2);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008E 
; 0000 008F // USART initialization
; 0000 0090 // USART disabled
; 0000 0091 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0092 
; 0000 0093 // Analog Comparator initialization
; 0000 0094 // Analog Comparator: Off
; 0000 0095 // The Analog Comparator's positive input is
; 0000 0096 // connected to the AIN0 pin
; 0000 0097 // The Analog Comparator's negative input is
; 0000 0098 // connected to the AIN1 pin
; 0000 0099 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 009A 
; 0000 009B // ADC initialization
; 0000 009C // ADC Clock frequency: 1000.000 kHz
; 0000 009D // ADC Voltage Reference: AVCC pin
; 0000 009E // ADC Auto Trigger Source: Free Running
; 0000 009F ADMUX=ADC_VREF_TYPE;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00A0 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A1 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00A2 
; 0000 00A3 // SPI initialization
; 0000 00A4 // SPI disabled
; 0000 00A5 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00A6 
; 0000 00A7 // TWI initialization
; 0000 00A8 // TWI disabled
; 0000 00A9 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00AA 
; 0000 00AB // Alphanumeric LCD initialization
; 0000 00AC // Connections are specified in the
; 0000 00AD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00AE // RS - PORTC Bit 0
; 0000 00AF // RD - PORTC Bit 1
; 0000 00B0 // EN - PORTC Bit 2
; 0000 00B1 // D4 - PORTC Bit 4
; 0000 00B2 // D5 - PORTC Bit 5
; 0000 00B3 // D6 - PORTC Bit 6
; 0000 00B4 // D7 - PORTC Bit 7
; 0000 00B5 // Characters/line: 16
; 0000 00B6 lcd_init(16);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00B7 
; 0000 00B8 // Global enable interrupts
; 0000 00B9 #asm("sei")
;PCODE: $00000072 VOL: 0
	sei
;PCODE: $00000073 VOL: 0
; 0000 00BA 
; 0000 00BB while (1)
;PCODE: $00000074 VOL: 0
; 0000 00BC       {
; 0000 00BD       lcd_gotoxy(0,0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00BE       num = read_adc(0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00BF       //num = num /10 ;
; 0000 00C0       /*if (num == (562))
; 0000 00C1             strX = " 1 ";
; 0000 00C2       else if (num == (542))
; 0000 00C3             strX = " 2 ";
; 0000 00C4       else if (num == (522))
; 0000 00C5            strX = " 3 ";
; 0000 00C6       else if (num == (482))
; 0000 00C7            strX = " 4 ";
; 0000 00C8       else if (num == (452))
; 0000 00C9            strX = " 5 ";
; 0000 00CA       else if (num == (422))
; 0000 00CB            strX = " 6 ";
; 0000 00CC       else if (num == (372))
; 0000 00CD            strX = " 7 ";
; 0000 00CE        else if (num == (332))
; 0000 00CF             strX = " 8 ";
; 0000 00D0       else if (num == (292))
; 0000 00D1            strX = " 9 ";
; 0000 00D2       else if (num == (202))
; 0000 00D3            strX = " * ";
; 0000 00D4       else if (num == (142))
; 0000 00D5            strX = " 0 ";
; 0000 00D6       else if (num == (702))
; 0000 00D7            strX = " # ";
; 0000 00D8       else if (num == (102))
; 0000 00D9            strX = " ! ";
; 0000 00DA       else
; 0000 00DB            strX = " A ";*/
; 0000 00DC 
; 0000 00DD       /*if (( num < 570) && ( num > 560))
; 0000 00DE             strX = " 1 ";
; 0000 00DF       else if (( num < 550) && ( num > 540))
; 0000 00E0             strX = " 2 ";
; 0000 00E1       else if (( num < 530) && ( num > 520))
; 0000 00E2            strX = " 3 ";
; 0000 00E3       else if (( num < 490) && ( num > 480))
; 0000 00E4            strX = " 4 ";
; 0000 00E5       else if (( num < 460) && ( num > 450))
; 0000 00E6            strX = " 5 ";
; 0000 00E7       else if (( num < 430) && ( num > 420))
; 0000 00E8            strX = " 6 ";
; 0000 00E9       else if (( num < 380) && ( num > 370))
; 0000 00EA            strX = " 7 ";
; 0000 00EB        else if (( num < 340) && ( num > 330))
; 0000 00EC             strX = " 8 ";
; 0000 00ED       else if (( num < 300) && ( num > 290))
; 0000 00EE            strX = " 9 ";
; 0000 00EF       else if (( num < 210) && ( num > 200))
; 0000 00F0            strX = " * ";
; 0000 00F1       else if (( num < 150) && ( num > 140))
; 0000 00F2            strX = " 0 ";
; 0000 00F3       else if (( num < 710) && ( num > 700))
; 0000 00F4            strX = " # ";
; 0000 00F5       else if (num == (102))
; 0000 00F6            strX = " ! ";
; 0000 00F7       else
; 0000 00F8            strX = " A ";
; 0000 00F9         */
; 0000 00FA       itoa(num, negin);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00FB       lcd_puts(negin);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00FC       //lcd_putsf(strX);
; 0000 00FD       //lcd_putchar(strZ);
; 0000 00FE       //lcd_clear();
; 0000 00FF       }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0100 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
